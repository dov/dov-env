### ~(user-name) dmacro's

#######
# MODE:	nil 
#######

#######
# MODE:	c-mode
#######
#######
b	indent	curly braces
{
~@
}
#
#######
ife	indent	if/else 
if (~@)
   ~(mark)
else
   ~(mark)

#
#######
ifd	indent	#ifdef/#endif
#ifdef ~@
~(mark)
#endif 

#
#######
if	indent	if statement
if (~@)
 ~(mark)

#
#######
mal	indent	call to malloc (prompts for var type)
= (~(prompt type "Variable type: ") *) ~(dmacro malloc)(~@sizeof(~(prompt)));

#
#######
history	expand	a new HISTORY entry in the masthead
     ~(user-id) - ~(mon) ~dd, ~(year): 
#
#######
while	indent	while statement
while (~@) {
   ~mark
}
#
#######
main	indent	an empty main() function with args
int main(int argc, char **argv)
{
    ~@
    exit(0);
}
#
#######
givio	indent	an template for reading and writing giv files with GivIO
#include "GivIO.h"
#include <fstream>
#include <math.h>

using namespace std;

int main(int argc, char **argv)
{
  giv::CGiv giv("in.giv");

  giv::TContour circle;

  double xc=100, yc=100, r=50;

  for (int i=0; i<16; i++)
  {
    double th = 2*M_PI*i/16;
    double x = xc + r * cos(th);
    double y = yc + r * sin(th);
    circle.push_back({x,y});
  }

  // Add a dataset to the giv file
  giv.push_back(
    {circle,
     {{"color", "red"},
      {"marks", "fcircle"}},
     true // closed
    });

  ofstream fh("out.giv");
  giv.Save(fh);
  fh.close();
}
#
#######
maincl expand	Dov's standard template for command line main.
#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>


static void die(const char *fmt, ...)
{
    va_list ap;
    va_start(ap,fmt); 
    
    vfprintf(stderr, fmt, ap);
    exit(-1);
}

#define CASE(s) if (!strcmp(s, S_))

int main(int argc, char **argv)
{
    int argp = 1;

    while(argp < argc && argv[argp][0] == '-') {
        char *S_ = argv[argp++];

        CASE("--help") {
            printf("~(pwdleaf) - ~@\n\n"
                   "Syntax:\n"
                   "    ~(pwdleaf) [] ...\n"
                   "\n"
                   "Options:\n"
                   "    --foo x    Foo\n");
            exit(0);
        }
        die("Unknown option %s!\n", S_);
    }
    exit(0);
    return(0);
}

#
#######
ifz	expand	#ifdef zero
#if 0
~@
#endif /* NEVER */

#
#######
iifnd	expand	#ifndef/#endif (prompts for condition)
#ifndef ~(prompt constant "#ifndef condition: ")
~@
#endif /* ~(prompt) */

#
#######
ifmal	indent	malloc with check for error (prompts for var type)
if ((~@ = (~(prompt type "Variable type: ") *) ~(dmacro malloc)(~(mark)sizeof(~(prompt)))) == NULLP(~(prompt)))

#
#######
switch	indent	switch statement
switch (~@) {
    default:
        break;
}
#
#######
p	indent	printf
printf("~@\n"~mark);
#
#######
ifor	indent	interactive for statment (prompts for variable name)
for (~(prompt var "Variable: ") = 0; ~prompt < ~@; ~prompt++) {
   ~mark
}

#
#######
dot-h	expand	comment block for the top of a .h file
~(dmacro cppmasthead t)~(dmacro hifndef)
#
#######
fori	indent	for statement (increments variable i)
for (i = 0; i < ~@; i++) {
 ~mark
}

#
#######
iifed	expand	#ifdef/#else/#endif (prompts for condition)
#ifdef ~(prompt constant "#ifdef condition: ")
~@
#else
 ~(mark)
#endif /* ~(prompt) */

#
#######
for	indent	for statment
for (~@; ; ) {
   ~mark
}

#
#######
i	expand	simple #include directive
#include <~@.h>

#
#######
hifndef	expand	used by dot-h macro
#ifndef ~((file-name) :up)_H
#define ~((file-name) :up)_H

~@

#endif /* ~((file-name) :up) */
#
#######
func	indent	function definition (prompts for type and name)
~(prompt type "Function type: ") ~(prompt name "Function name: ")(~@)
{
~mark
} /* ~(prompt name) */

#
#######
case	indent	case/break
case ~@:

break;
#
#######
d	expand	
#define 
#
#######
masthead	expand	comment block for the top of a .c file
/*======================================================================
//  ~(file-name).~(file-ext) - ~point
//
//  Dov Grobgeld <dov.grobgeld@gmail.com>
//  ~(chron)
//----------------------------------------------------------------------
*/

#
#######
cppmasthead	expand	comment block for the top of a .c file
//======================================================================
//  ~(file-name).~(file-ext) - ~point
//
//  Dov Grobgeld <dov.grobgeld@gmail.com>
//  ~(chron)
//----------------------------------------------------------------------

#
#######
iifd	expand	#ifdef/#endif (prompts for condition)
#ifdef ~(prompt constant "#ifdef condition: ")
~@
#endif /* ~(prompt) */
#

#######
# MODE:	c++-mode
#######
cppmasthead	expand	comment block for the top of a .c file
//======================================================================
//  ~(file-name).~(file-ext) - ~point
//
//  Dov Grobgeld <dov.grobgeld@gmail.com>
//  ~(chron)
//----------------------------------------------------------------------

#
#######
b	indent	curly braces
{
~@
}
#
#######
ife	indent	if/else 
if (~@)
   ~(mark)
else
   ~(mark)

#
#######	
class indent	class definition
class ~(prompt cname "Class name: ")
{

public:
    ~(prompt cname)( ~@ );
    ~(prompt cname)(const ~(prompt cname) & _c);
    ~(prompt cname) & operator = (const ~(prompt cname) & _c);
    virtual ~(~)~(prompt cname)( );

protected:

private:

}; // Class ~(prompt cname)

#
#######
ifd	indent	#ifdef/#endif
#ifdef ~@
~(mark)
#endif 

#
#######
if	indent	if statement
if (~@)
 ~(mark)

#
#######
mal	indent	call to malloc (prompts for var type)
= (~(prompt type "Variable type: ") *) ~(dmacro malloc)(~@sizeof(~(prompt)));

#
#######
history	expand	a new HISTORY entry in the masthead
     ~(user-id) - ~(mon) ~dd, ~(year): 
#
#######
while	indent	while statement
while (~@) {
   ~mark
}
#
#######
main	indent	an empty main() function with args
int main(int argc, char **argv)
{
  ~@
  exit(0);
}
#
#######
maincpp expand	Dov's standard template for command line utilities main 
#include <stdio.h>
#include <stdlib.h>
#include <fmt/core.h>

using namespace std;
using fmt::print;

template <typename... Args>
static void die(fmt::format_string<Args...> FormatStr, Args &&... args)
{
  fmt::print("{}", fmt::format(FormatStr, std::forward<Args>(args)...));
  exit(-1);
}

#define CASE(s) if (s == S_)

int main(int argc, char **argv)
{
  int argp = 1;

  while(argp < argc && argv[argp][0] == '-')
  {
    const string& S_ = argv[argp++];

    CASE("--help")
    {
      fmt::print("~(pwdleaf) - ~@\n\n"
                 "Syntax:\n"
                 "    ~(pwdleaf) [] ...\n"
                 "\n"
                 "Options:\n"
                 "    --foo x    Foo\n");
      exit(0);
    }
    die("Unknown option {}!", S_);
  }
  exit(0);
  return(0);
}
#

#######
ifz	expand	#ifdef zero
#if 0
~@
#endif /* NEVER */

#
#######
iifnd	expand	#ifndef/#endif (prompts for condition)
#ifndef ~(prompt constant "#ifndef condition: ")
~@
#endif /* ~(prompt) */

#
#######
ifmal	indent	malloc with check for error (prompts for var type)
if ((~@ = (~(prompt type "Variable type: ") *) ~(dmacro malloc)(~(mark)sizeof(~(prompt)))) == NULLP(~(prompt)))

#
#######
switch	indent	switch statement
switch (~@) {
    default:
        break;
}
#
#######
p	indent	printf
printf("~@\n"~mark);
#
#######
ifor	indent	interactive for statment (prompts for variable name)
for (~(prompt var "Variable: ") = 0; ~prompt < ~@; ~prompt++) {
   ~mark
}

#
#######
dot-h	expand	comment block for the top of a .h file
~(dmacro cppmasthead)~(dmacro hifndef)
#
#######
fori	indent	for statement (increments variable i)
for (i = 0; i < ~@; i++) {
 ~mark
}

#
#######
dot-cpp	expand	comment block for the top of a .cpp file
~(dmacro cppmasthead)
#include "~((file-name)).h"

~@
#
#######
fori	indent	for statement (increments variable i)
for (i = 0; i < ~@; i++) {
 ~mark
}

#
#######
iifed	expand	#ifdef/#else/#endif (prompts for condition)
#ifdef ~(prompt constant "#ifdef condition: ")
~@
#else
 ~(mark)
#endif /* ~(prompt) */

#
#######
for	indent	for statment
for (~@; ; ) {
   ~mark
}

#
#######
i	expand	simple #include directive
#include <~@.h>

#
#######
hifndef	expand	used by dot-h macro
#ifndef ~((file-name) :up)_H
#define ~((file-name) :up)_H

~@

#endif /* ~((file-name) :up) */
#
#######
func	indent	function definition (prompts for type and name)
~(prompt type "Function type: ") ~(prompt name "Function name: ")(~@)
{
~mark
} /* ~(prompt name) */

#
#######
case	indent	case/break
case ~@:

break;
#
#######
d	expand	
#define 
#
#######
masthead	expand	comment block for the top of a .c file
//======================================================================
//  ~(file-name).~(file-ext) - ~point
//
//  Dov Grobgeld <dov.grobgeld@gmail.com>
//  ~(chron)
//----------------------------------------------------------------------

#
#
#######
iifd	expand	#ifdef/#endif (prompts for condition)
#ifdef ~(prompt constant "#ifdef condition: ")
~@
#endif /* ~(prompt) */
#

#######
# MODE:	python-mode
#######
sconstruct	expand	comment block for the top of a sconstruct file
env = Environment(CPPFLAGS=['-Wall','-g','-std=c++2a'])
env.ParseConfig('pkg-config --cflags --libs fmt')
env.Program('foo',
            ['foo.cc'])
#
#######
argparse expand	Add a basic argparse template
import argparse

parser = argparse.ArgumentParser(description='Process a file')
parser.add_argument('-o', '--output',
                    dest='output',
                    action='store',
                    type=str,
                    default='-',
                    help='Output filename')
parser.add_argument('-v', '--verbose',
                    dest='verbose',
                    action='store_true',
                    help='Verbose editing')
parser.add_argument('filename', nargs='?', help='Input. Default is stdin')
args = parser.parse_args()
Output = args.output
~@
#
#######
xec expand	Add xec function snippt (for "batch") files
import subprocess

def xec(cmd, decode=True, chomp=True, verbose=False):
  '''Run a command a returns its stdout output.

  decode -- run (utf8) decode of the resulting string
  chomp -- get rid of the last newline (like in perl)
  '''
  with subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE) as ph:
    if verbose:
      sys.stderr.write(cmd + '\n')
    res = b''
    maxsize = 1024
    while True:
      buf = ph.stdout.read()
      if len(buf)==0:
        break
      res += buf
    ph.wait()
  if decode:
    res=res.decode()
  if chomp:
    res = res[:-1]
  return res

~@
#
#######
logger expand	Add logger snippet
import datetime
import logging

logging.basicConfig(filename='basic.log',
                    level=logging.DEBUG,
                    format='%(levelname)s: %(name)s: %(message)s')
logging.info('------------------')
logging.info(f'Running on {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')
logging.debug('Debug me!')
#
#######
walk expand	Add a basic walk template
import os

def visit(file_name):
  """visit all files with the given name recursively."""

  for root, dirs, files in os.walk('.'):
    for file in files:
      if file == file_name:
        print('found ' + os.path.join(root, file))

if __name__ == '__main__':
  visit('foo.bar')
~@
#
#######
die expand	Add a die function

import sys

def die(msg):
  if not msg.endswith('\n'):
    msg += '\n'
  sys.stderr.write(msg)
  sys.exit(-1)
~@
#

#######
# MODE:	makefile-mode
#######

#######
masthead	expand	My default header
######################################################################
#  Makefile for ~(pwdleaf)
#  ~((eval ""))
#  Dov Grobgeld
#  ~(chron)
######################################################################


#

#######
m	expand	Default target in makefile
DEBUG   = -g
INCLUDE +=
CFLAGS  += $(INCLUDE) $(DEBUG)
LDFLAGS += $(DEBUG) ~@-lm
SRC      = ~(pwdleaf).c
OBJ      = $(SRC:.c=.o)

~(pwdleaf) : $(OBJ)
	$(CC) -o $@ $(OBJ) $(LDFLAGS)

clean:
	$(RM) $(OBJ) ~(pwdleaf) core
#

#######
alglibs	expand	Include target for alglibs
INCLUDE += -I$(ALGLIBS)/alglibs/include
LDFLAGS += -L$(ALGLIBS)/alglibs/lib -lalg_img -lalg_err -lalg_info -lalg_strings

#

#######
gtk	expand	Include target for gtk
INCLUDE += `pkg-config --cflags gtk+-2.0`
LDFLAGS += `pkg-config --libs gtk+-2.0`
#

#######
# MODE:	emacs-lisp-mode
#######
#######
lambda	expand	lambda expression
(lambda () "" (interactive) (foo) (bar))
#

#######
# MODE:	org-mode
#######

#######
perl	expand	perl source section
#+begin_src perl
~@
#+end_src
#

#######
python	expand	python source section
#+begin_src python
~@
#+end_src
#

#######
octave	expand	octave source section
#+begin_src octave
~@
#+end_src
#

#######
octave-plot	expand	octave source section
#+begin_src octave
x = -10:0.1:10;
y = sin(x)
figure(1,"visible","off");
plot(x,y);
print "-S800,500"  -dsvg ~@ chart.svg;
ans = ""
#+end_src

[[chart.svg]]
#

#######
src	expand	perl source section
#+begin_src ~@

#+end_src
#

#######
example	expand	example source section
#+begin_example 
~@
#+end_example
#

######
sh	expand	perl source section
#+begin_src sh
  ~@
#+end_src
#

######
elisp	expand	elisp source section
#+begin_src emacs-lisp
  ~@
#+end_src
#

######
ditaa	expand	elisp source section
#+begin_src ditaa :file~@ .png :cmdline -r -s 0.8 :exports both

#+end_src
#

######
dot	expand	elisp source section
#+begin_src dot :file ~@ :cmdline -Tsvg
digraph g {

}
#+end_src
#

######
asymptote	expand	elisp source section
#+begin_src asymptote :file ~@ :cmdline -Tsvg
#+end_src
#

######
matplotlib	expand	elisp source section
#+begin_src python :results file
import matplotlib.pyplot as plt

fig = plt.figure(figsize=(4,3))
ax = fig.add_subplot(111)

# Set output filename
fn  = "out.svg"
fig.savefig(fn)
return fn
#+end_src
#

#######
# MODE:	org-mode
#######
dot-org	expand	comment block for the top of a .org file
~(dmacro orgmasthead)
#

####
orgmasthead	expand	comment block for the top of an .org file
#+STARTUP: hidestars showall 
#+OPTIONS: ^:nil toc:nil num:nil html-postamble:nil
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://swteam:8080/~dov/dov-org.css" />
#+AUTHOR: Dov Grobgeld
#+TITLE: ~(file-name)
#+DATE: ~(org-date-string)

* ~@
#

###
org-reveal expand Insert reveal comments for reveal slide shows
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0
#+comment: TBD - Add my standard css etc

#

#######
# MODE:	meson-mode
#######
mesonbuild	expand	comment block for the top of a meson.build file
~(dmacro mesonmasthead)
#

####
mesonmasthead	expand	comment block for the top of an .meson file
# meson --buildtype debug build_debug
project('~(pwdleaf)','cpp',
       default_options : ['c_std=c++1z'])

cxx = meson.get_compiler('cpp')
dep_m = cxx.find_library('m')

src = ['~(pwdleaf).cpp'~(point)]

executable('~(pwdleaf)',
           src,
           include_directories: ['/usr/include'],
           dependencies : [dep_m])

#

###
meson-qt expand Insert qt compile directives
qt5 = import('qt5')
qt5_dep = dependency('qt5', modules: ['Core','Widgets', 'UiTools'])
moc_files = qt5.preprocess(
  moc_headers : ['~(pwdleaf).h'],
  include_directories: inc,
  dependencies: qt5_dep,
  qresources : ['~(pwdleaf).qrc',]
)

#

###
meson-python expand Insert embedded python compile directives
py_dep = cxx.find_library('python3.7m')

#

#######
# MODE:	cmake-mode
#######
cmakebuild	expand	comment block for the top of a CMakeLists.txt file
~(dmacro cmakemasthead)
#

####
cmakemasthead	expand	comment block for the top of an CMakeLists.txt file
cmake_minimum_required(VERSION 3.16)

project(~(pwdleaf) VERSION 1.0.0 LANGUAGES CXX)

find_package(PkgConfig)
pkg_check_modules(FMT REQUIRED fmt)

set(CMAKE_AUTOMOC ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(Qt5 REQUIRED COMPONENTS Core)

# Uncomment these for Qt6
#find_package(Qt6 REQUIRED COMPONENTS Core)
#qt_standard_project_setup()

add_executable(~(pwdleaf)
    ~(pwdleaf).cpp
)

# Change to Qt6 for qt6
target_link_libraries(~(pwdleaf) PRIVATE Qt5::Core ${FMT_LIBRARIES})

#

